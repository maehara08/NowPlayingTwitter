#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('NowPlayingTwitter:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io=require('socket.io')(server);
var passport=app.__passport;
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var connection = require('../util/mysql_util');
var passportSocketIo = require("passport.socketio");
io.use(passportSocketIo.authorize({
  passport : passport,
  cookieParser: require('cookie-parser'),
  // key:          'express.sid',
  secret:       'keyboard cat',
  store:        app.__sessionStore, //さっきの sessionStore 渡す
  success:      onAuthorizeSuccess,
  fail:         onAuthorizeFail
}));

// // セッションのAuthorize 成功
//
function onAuthorizeSuccess(data, accept){
  console.log('successful connection to socket.io');
  accept(null, true);

}

//セッションのAuthorizeしっぱいしっぱい
function onAuthorizeFail(data, message, error, accept){
  if(error) {
    throw new Error(message);
  }
  console.log('failed connection to socket.io:', message);
  accept(null, false);
}

io.sockets.on('connection',function (socket) {
  console.log('a user is connected!');
  var user = socket.request.user; //これでユーザーを参照できる
  if(user){
    // console.log("session data : ", user);
  }
  socket.on('lastfm_user_name',function (userName) {
    // console.log(userName);
    var query='update users set last_fm_user_name = ? where twitter_user_name = ? ';
    var placeHolder=[];
    placeHolder.push(userName,user.username);
    connection.query(query,placeHolder,function(err,result,fields){
        if (err){
          console.error(err);
          return;
        }
        console.log("result =  ",result);
    });
  });
});

module.exports.io=io;
